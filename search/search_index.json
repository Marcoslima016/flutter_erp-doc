{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Flutter ERP Docs \uf0c1","title":"Flutter ERP Docs"},{"location":"#flutter-erp-docs","text":"","title":"Flutter ERP Docs"},{"location":"application/app_config/","text":"AppConfig class \uf0c1","title":"App config"},{"location":"application/app_config/#appconfig-class","text":"","title":"AppConfig class"},{"location":"application/custom_app_controller/","text":"CustomAppController class \uf0c1 Source Classe extendida no controller da aplica\u00e7\u00e3o. Exemplo pr\u00e1tico de uma subclasse AppController que extende a classe CustomAppController: class AppController extends CustomAppController { @ override AppConfig appConfig ; @ override AuthPreferences authPreferences = AuthPreferences ( privateRoute: \"/teste\" ); AppStartConfig appStartConfig ; static final AppController instance = AppController . _ (); AppController . _ () { appStartConfig = AppStartConfig ( appSession: appSession ); appConfig = AppConfig ( setInitialRoute: appStartConfig . initialRoute , ); } } Inheritance Implementations CustomAppControllerRequireds Implementers Construtores \uf0c1 CustomAppController({}); Propriedades \uf0c1 appConfig -> AppConfig authPrefernes -> AuthPreferences Metodos \uf0c1","title":"Custom app controller"},{"location":"application/custom_app_controller/#customappcontroller-class","text":"Source Classe extendida no controller da aplica\u00e7\u00e3o. Exemplo pr\u00e1tico de uma subclasse AppController que extende a classe CustomAppController: class AppController extends CustomAppController { @ override AppConfig appConfig ; @ override AuthPreferences authPreferences = AuthPreferences ( privateRoute: \"/teste\" ); AppStartConfig appStartConfig ; static final AppController instance = AppController . _ (); AppController . _ () { appStartConfig = AppStartConfig ( appSession: appSession ); appConfig = AppConfig ( setInitialRoute: appStartConfig . initialRoute , ); } } Inheritance Implementations CustomAppControllerRequireds Implementers","title":"CustomAppController class"},{"location":"application/custom_app_controller/#construtores","text":"CustomAppController({});","title":"Construtores"},{"location":"application/custom_app_controller/#propriedades","text":"appConfig -> AppConfig authPrefernes -> AuthPreferences","title":"Propriedades"},{"location":"application/custom_app_controller/#metodos","text":"","title":"Metodos"},{"location":"primeiros_passos/criar_modulo/","text":"Criar modulo \uf0c1 Instru\u00e7\u00f5es de como criar um modulo 1. Criar diret\u00f3rio \uf0c1 Dentro da pasta modulos, crie a pasta do modulo e dentro dessa nova pasta crie os arquivos que v\u00e3o compor o modulo, da seguinte forma: Dentro da pasta modulos crie uma pasta com o nome do novo modulo. Em seguida, dentro da nova pasta crie os arquivos sguindo a estrutura b\u00e1sica de um modulo, conforme imagem abaixo: Nos pr\u00f3ximos passos iremos preencher os conte\u00fados dos arquivos criados, por enquanto podem ficar vazios. 2. Arquivo View \uf0c1 O arquivo que possui a extens\u00e3o \".view\" ser\u00e1 respons\u00e1vel pela parte visual do nosso modulo. Existem situa\u00e7\u00f5es onde esse arquivo n\u00e3o ser\u00e1 usado, por exemplo no caso de um modulo composto que n\u00e3o possui uma view, mas cont\u00e9m submodulos onde estes sim possuem suas respectivas views. Pra ficar mais f\u00e1cil de entender, pegue como exemplo um modulo chamado clientes, que tem a tarefa de gerenciar os clientes da empresa. O modulo clientes em si n\u00e3o possui a camada view, mas este modulo cont\u00e9m dois sub-modulos: clientes_formulario e clientes_relat\u00f3rio, onde cada um desses submodulos possuem a sua camada view. 3. Arquivo Modulo \uf0c1 O arquivo que possui a extens\u00e3o \".modulo\" \u00e9 o arquivo de acesso e controle do nosso modulo. Esse arquivo disponibiliza a view e o controller do nosso modulo 4. Pasta Sub-modulos \uf0c1 Um modulo pode ser composto de diferentes sub-modulos conforme for necess\u00e1rio. Na maioria dos casos os modulos seguem um padr\u00e3o de dois sub-modulos, sendo um deles referente a tela de formul\u00e1rio e o outro sub-modulo \u00e9 referente a tela de relat\u00f3rio.","title":"Criar modulos"},{"location":"primeiros_passos/criar_modulo/#criar-modulo","text":"Instru\u00e7\u00f5es de como criar um modulo","title":"Criar modulo"},{"location":"primeiros_passos/criar_modulo/#1-criar-diretorio","text":"Dentro da pasta modulos, crie a pasta do modulo e dentro dessa nova pasta crie os arquivos que v\u00e3o compor o modulo, da seguinte forma: Dentro da pasta modulos crie uma pasta com o nome do novo modulo. Em seguida, dentro da nova pasta crie os arquivos sguindo a estrutura b\u00e1sica de um modulo, conforme imagem abaixo: Nos pr\u00f3ximos passos iremos preencher os conte\u00fados dos arquivos criados, por enquanto podem ficar vazios.","title":"1. Criar diret\u00f3rio"},{"location":"primeiros_passos/criar_modulo/#2-arquivo-view","text":"O arquivo que possui a extens\u00e3o \".view\" ser\u00e1 respons\u00e1vel pela parte visual do nosso modulo. Existem situa\u00e7\u00f5es onde esse arquivo n\u00e3o ser\u00e1 usado, por exemplo no caso de um modulo composto que n\u00e3o possui uma view, mas cont\u00e9m submodulos onde estes sim possuem suas respectivas views. Pra ficar mais f\u00e1cil de entender, pegue como exemplo um modulo chamado clientes, que tem a tarefa de gerenciar os clientes da empresa. O modulo clientes em si n\u00e3o possui a camada view, mas este modulo cont\u00e9m dois sub-modulos: clientes_formulario e clientes_relat\u00f3rio, onde cada um desses submodulos possuem a sua camada view.","title":"2. Arquivo View"},{"location":"primeiros_passos/criar_modulo/#3-arquivo-modulo","text":"O arquivo que possui a extens\u00e3o \".modulo\" \u00e9 o arquivo de acesso e controle do nosso modulo. Esse arquivo disponibiliza a view e o controller do nosso modulo","title":"3. Arquivo Modulo"},{"location":"primeiros_passos/criar_modulo/#4-pasta-sub-modulos","text":"Um modulo pode ser composto de diferentes sub-modulos conforme for necess\u00e1rio. Na maioria dos casos os modulos seguem um padr\u00e3o de dois sub-modulos, sendo um deles referente a tela de formul\u00e1rio e o outro sub-modulo \u00e9 referente a tela de relat\u00f3rio.","title":"4. Pasta Sub-modulos"}]}